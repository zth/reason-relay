interface Node {
  id: ID!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

scalar Color

enum UserRole {
  Admin
  User
}

enum ObserverStatus {
  Active
  Inactive
}

type Query {
  me: User!
  user(id: ID!): User
  userByLocation(location: LocationBounds!): User
  participantById(id: ID!): Participant
  users: [User!]!
  usersConnection(
    first: Int
    after: String
    last: Int
    before: String
  ): UserConnection
  participantsConnection(
    after: String
    first: Int
    before: String
    last: Int
  ): ParticipantConnection
  Observer(id: ID!): Observer
  node(id: ID!): Node
}

input MutationWithReservedNameInput {
  or: Boolean!
  and: String!
  nested: MutationWithReservedNameInput
}

type Mutation {
  setUserLocation(input: SetUserLocationInput!): SetUserLocationPayload!
  setUserRole(input: SetUserRoleInput!): SetUserRolePayload!
  deleteUser(userId: ID!): DeleteUserPayload!
  mutationWithReservedName(input: MutationWithReservedNameInput!): Boolean!
}

type Subscription {
  userChanged(input: UserChangedInput!): UserChangedPayload!
}

input UserChangedInput {
  clientMutationId: String
  userId: ID!
}

type UserChangedPayload {
  user: User
}

input SetUserLocationInput {
  clientMutationId: String
  userId: ID!
  location: LocationBounds
}

input SetUserRoleInput {
  userId: ID!
  role: UserRole!
}

type SetUserRolePayload {
  user: User
}

type DeleteUserPayload {
  deletedUserId: ID!
}

type SetUserLocationPayload {
  clientMutationId: String
  changedUser: User
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  location: Location!
  role: UserRole!
  favoriteColor: Color!
  new: Boolean!
  friendsConnection(
    after: String
    first: Int
    before: String
    last: Int
  ): UserConnection
  participants(
    after: String
    first: Int
    before: String
    last: Int
  ): ParticipantConnection
}

type Observer implements Node {
  id: ID!
  name: String!
  isOnline: Boolean
  status: ObserverStatus!
  observingUsersConnection(
    after: String
    first: Int
    before: String
    last: Int
  ): UserConnection
  manager: Participant
}

union Participant = User | Observer

type ParticipantConnection {
  pageInfo: PageInfo!
  edges: [ParticipantEdge]
}

type ParticipantEdge {
  node: Participant
  cursor: String!
}

type Location {
  id: ID!
  lat: Float!
  lng: Float!
}

input LocationBounds {
  lat: Float!
  lng: Float!
  child: LocationBounds
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: String!
}
