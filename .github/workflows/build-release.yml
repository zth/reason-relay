name: Build Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Optional tag name"
        required: false

jobs:
  build-ppx-linux:
    strategy:
      matrix:
        platform: [ubuntu-latest]

    name: Build PPX for release
    runs-on: ${{ matrix.platform }}
    defaults:
      run:
        working-directory: packages/rescript-relay/rescript-relay-ppx
    container:
      image: cichocinski/docker-esy:alpine3.8
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: 12.19.0
          registry-url: "https://registry.npmjs.org"
        env:
          CI: true
      - name: Esy install
        run: esy install
      - name: Build PPX
        run: esy linux-release-static
        working-directory: packages/rescript-relay/rescript-relay-ppx
      - name: Test PPX
        run: esy test
      - name: Copy built PPX file
        run: |
          mv ./_esy/default/build/default/bin/RescriptRelayPpxApp.exe ppx-ubuntu-latest
      - name: Upload PPX artifact
        uses: actions/upload-artifact@v2
        with:
          name: ppx-ubuntu-latest
          path: packages/rescript-relay/rescript-relay-ppx/ppx-ubuntu-latest
          if-no-files-found: error

  build-ppx:
    strategy:
      matrix:
        # Add Windows here when it gets supported
        platform: [macos-latest]

    name: Build PPX for release
    runs-on: ${{ matrix.platform }}
    defaults:
      run:
        working-directory: packages/rescript-relay/rescript-relay-ppx
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: 12.19.0
          registry-url: "https://registry.npmjs.org"
        env:
          CI: true
      - name: Install esy
        run: npm install -g esy
      - name: Build PPX
        uses: esy/github-action@v1
        with:
          cache-key: ${{ hashFiles('esy.lock/index.json') }}
          working-directory: packages/rescript-relay/rescript-relay-ppx
      - name: Test PPX
        run: esy test
      - name: Copy built PPX file
        run: |
          mv ./_esy/default/build/default/bin/RescriptRelayPpxApp.exe ${{ fromJson('{ "ubuntu-latest": "ppx-linux", "macos-latest": "ppx-darwin" }')[matrix.platform] }}
      - name: Upload PPX artifact
        uses: actions/upload-artifact@v2
        with:
          name: ppx-${{ matrix.platform }}
          path: packages/rescript-relay/rescript-relay-ppx/ppx-*
          if-no-files-found: error

  build-release:
    name: Build release package
    runs-on: ubuntu-latest
    needs: [build-ppx, build-ppx-linux]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: 12.19.0
        env:
          CI: true
      - name: Install esy
        run: npm install -g esy
      - name: Build PPX
        uses: esy/github-action@v1
        with:
          cache-key: ${{ hashFiles('esy.lock/index.json') }}
          working-directory: packages/rescript-relay/rescript-relay-ppx
      - name: Clean up before building
        run: |
          rm -rf packages/rescript-relay/__tests__/*
      - name: Build assets
        env:
          INPUT_TAG_NAME: ${{ github.event.inputs.tag_name }}
        run: |
          ./build-ci.sh
      - name: Download all built PPXes
        uses: actions/download-artifact@v2
      - name: Move PPXs into release directory
        run: |
          mv ppx-ubuntu-latest/ppx-* _release/ && mv ppx-macos-latest/ppx-* _release/
      - name: Remove PPX artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            ppx-ubuntu-latest
            ppx-macos-latest
      - name: Publish to NPM (tagged)
        if: ${{ github.event.inputs.tag_name }}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd _release && npm publish --dry-run --tag ${{ github.event.inputs.tag_name }}
      - name: Publish to NPM (master)
        if: ${{ !github.event.inputs.tag_name }}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd _release && npm publish --dry-run
      - name: Upload built folder
        uses: actions/upload-artifact@v2
        with:
          name: release-build
          path: _release/
