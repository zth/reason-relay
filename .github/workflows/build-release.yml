name: Build Release

on: [push]

jobs:
  build-ppx:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]

    name: Build PPX for release
    runs-on: ${{ matrix.platform }}
    defaults:
      run:
        working-directory: packages/reason-relay/reason-relay-ppx
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: 12.19.0
        env:
          CI: true
      - name: Install esy
        run: npm install -g esy
      - name: Build PPX
        uses: esy/github-action@v1
        with:
          cache-key: ${{ hashFiles('esy.lock/index.json') }}
          working-directory: packages/reason-relay/reason-relay-ppx
      - name: Copy built PPX file
        run: |
          mv ./_esy/default/build/default/bin/ReasonRelayPpxApp.exe ${{ fromJson('{ "ubuntu-latest": "ppx-linux", "macos-latest": "ppx-darwin" }')[matrix.platform] }}
      - name: Upload PPX artifact
        uses: actions/upload-artifact@v2
        with:
          name: ppx-${{ matrix.platform }}
          path: packages/reason-relay/reason-relay-ppx/ppx-*
          if-no-files-found: error
  build-release:
    name: Build release package
    runs-on: ubuntu-latest
    needs: build-ppx
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: 12.19.0
        env:
          CI: true
          - name: Install esy
          run: npm install -g esy
      - name: Build PPX
        uses: esy/github-action@v1
        with:
          cache-key: ${{ hashFiles('esy.lock/index.json') }}
          working-directory: packages/reason-relay/reason-relay-ppx
      - name: install yarn
        run: |
          npm install -g yarn
      - name: set yarn cache dir
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Clean up before building
        run: |
          rm -rf packages/reason-relay/__tests__
      - name: Build assets
        run: |
          ./build-ci.sh
      - name: Download all built PPXes
        uses: actions/download-artifact@v2
      - name: Move PPXs into release directory
        run: |
          mv ppx-ubuntu-latest/ppx-* _release/ && mv ppx-macos-latest/ppx-* _release/
      - name: Prepare package
        run: |
          cd _release && npm pack
      - name: Upload package
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: _release/*.tgz
          if-no-files-found: error
